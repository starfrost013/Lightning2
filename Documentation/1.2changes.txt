Lightning 2.0
Changes

Everything that matters to the api has to go here

2022.10.26:
* Began working on LightningNetwork
* Made MinimumCpuCapabilities and MinimumOperatingSystem case-insensitive [1.1 Backport]
* Added new GlobalSettings (network settings to be moved to new LightningServer.ini):
	- AudioDeviceHz
	- AudioChannels
	- AudioFormat
	- AudioChunkSize
	- NetworkMasterServer	
	- NetworkDefaultPort
	- NetworkKeepAliveMs
* Moved MaxFPS to Graphics Section

2022.10.27:
* Added LNetClient, LNetServer
* Refactored GlobalSettings using constants for default values and renaming properties to start with their category names.

2022.10.28:
* Client now functional.

2022.10.29:
* Implemented Renderable::Color
* Made all Primitive classes that inherit from Renderable. The PrimitiveRenderer class now just adds these classes to the Renderer so they are all subject to z-index, etc.

2022.10.30:
* Refactored the Renderer.
* PrimitiveRenderer -> PrimitiveManager and is now an asset manager.

2022.11.02:
* Bugfixes in primitives.

2022.11.04:
* Updated SDL2_gfx for some minor optimisation in C=+ (it will now automatically draw AA Lines when thickness is 1)
* Started working on allowing all primitives to have borders. 

2022.11.04:
* Added border support to all primitives (except basictext).
* Removed ability to initialise lightning without the Scene Manager.
* Fixed Scene::Shutdown.

2022.11.05:
* PrimitiveManager::Draw**** -> PrimitiveManager::Add****

2022.11.06:
* LightningGL properly uses nullable.
* Make PrimitiveManager return the primitive type, add border parameters to all Primitives.
* Remove InitSettings.
* Fix bug with default window locations.
* Console Core

2022.11.07:
* Renderer is now an immutable singleton
* Renderer removed as a parameter to all methods
* Merged SceneManager and Lightning
* Renderer now stores all Renderables and has global methods (AddRenderable, RemoveRenderable, GetRenderableWithName, ContainsRenderable) for searching them
* 1.2 -> 2.0 due to total incompatibility
* Added new GlobalSettings
	- DebugKey
	- DebugDisabled
	- DebugLineDistance
* Added new Events
	- OnCreate (default implementation - Renderable::Create)
	- OnDestroy (default implementation - Renderable::Destroy)
* GlobalSettings::Renderer -> GlobalSettings::RenderingBaclend
* Implement Renderable::CanReceiveEventsWhileUnfocused for focus-only events
* ForegroundColor now used for cursors, CursorColor is dead


2022.11.11:
* Fix primitive rendering issues
* Fix culling issues

2022.11.12:
* Renderer now applies camera transformations
* Fixed culling issues - take into account camera position and simply check for within screen bounds, only offset position of SnapOSreen is false
* Renderable::NotCullable
* Renderable::Update (run each frame regardless of the renderable actually being on screen)
* Simplified rendering code
* Began working on multiple renderer capabilities
* Fix positional sound

2022.11.13:
* Adapted to multiple renderers
* GlobalSettings optimisation.
* GlobalSettings::RenderingBackend -> GlobalSettings::SdlRenderingBackend

2022.11.15:
* "Functional" client and server

2022.11.16:
* Remove FontManager::LoadFont, use addasset instead
* Other minor bugfixes
* Fixed loading WindowTitle
* Server Init code
* Server works
* Delete old logs

2022.11.17:
* Renderable Storage (ReplicatedStorage) class for network messaging
* Don't crash on missing localisation text, instead warning msg box + text missnig

2022.11.19:
* AssetManager::GetAssets()

2022.11.22-2022.11.26:
* Object hierarchy system
* Nested Rendering
* Nested Event Handling
* Fixed numerous bugs with debug viewer

2022.11.27:
* OnCreate now called AFTER renderable is added to hierarchy
* Get rid of Load(), always have Create()
* Renderable::AnimationRunning -> Renderable::IsAnimating
* Add Renderable::IsNotRendering to globally turn off an item rendering 
* Nuke shitty basic text api

2022.11.28:
* fix sdkbuild option logging, add timer for builds
* fix bug in containsrenderablebyname, getrenderablebyname, etc

2022.11.29:
* split event handling out into a separate internal static EventManager class (so that the code can be shaed between renderers, and it's more obvious where it is and what it does)

2022.11.30:
* KeyPressedEvent/KeyReleasedEvent -> KeyEvent

2022.12.02:
* Actually implemented SceneChangeEvent
* SceneManager::SwitchAway -> SceneManager::SwitchFrom

2022.12.03:
* WADv3: Use rotating xor cipher and obfuscate key in binary to slightly increase obfuscated WAD security
* Update to SDL 2.26.1 (from 2.24.2) 

2022.12.04:
* SDL not initialised by core engine anymore, only SDL renderer 
* Override 
* Make RendererSettings a property instead of parameter to Renderer::Start
* Finally begin working on FreeType text 

2022.12.05-2022.12.10:
* Renderers themselves now handle primitive rendering, so primitives are now renderer-independent
* Removed SDL2_gfx, subset of its code now in SdlRenderer class
* Circle -> Ellipse
* Added Bezier Curve support
* Anti-aliased, filled shapes (partial)

2022.12.11:
* Remove non-required renderables:
	- Thick lines
	- Bezier curves
	- Rounded rectangles
	- Triangles
	- n-sided polygons

2022.12.12
* Fix rectangles
* Fix texture rendering

2022.12.13
* Fix particle effects (Particles are now all instances of their parent texture)

2022.12.16:
* Fix SDL dll locations
* Separate client/server shutdown code

2022.12.17:
* Renderable create/draw/update/destroy now public
* Freetype font loading and unloading
* Freetype initialisation
* Text is now a renderable
* Default to primary monitor resolution if resolution not provided

2022.12.18-2022.12.22:
* Freetype font loader
* Freetype font manager
* GlyphCache
* Glyph management and rendering

2022.12.22-2022.12.25:
* Text class for FreeType
* Sizing for freetype
* Colouring for freetype

2022.12.30:
* Holy shit it finally kinda works.

2022.12.31:
* Added path to texture constructor (optional)
* Implemented missing texture functionality.

2023.01.01:
* Freetype text rendering 90% working (from 50%)
* Way simpler glyphcache.

2023.01.02:
* Text -> TextBlock
* Remove SdLRenderingBackend
* Implement new GlobalSetting:
	+ GlobalSettings::MinimumCharacterSpacing
	+ GlobalSettings::WordSpacing
	+ GlobalSettings::LineSpacing

2023.01.03:
* Use Lightning.Renderer.AddRenderable for everything
* Every Renderable now uses standard creation/destruction methods
* Remove nearly all Asset Manager APIs and those that remain are now internal static state classes

* todo:
	- overridable default values
	- fix memory leak lmao
	- a lot more configurable
	- renderer independent blend mode!!!!!!!!!!!
	- remaining freetype features
	- FIX BUSTED AND SHIT HORRIBLE VERY BAD UI SYSTEM!!!!!!
	- global usings everywhere
	- unit testing
	- make scene events events
	- get rid of TERRIBLE HACK in LightningGL.Test!!!!
	- NativeAOT Publish
	- VS Item Template for Scenes
	- Moveable Cursor?
	- can we get rid of renderposition?
	- console
	- scene switcher (debug)
	- consider moving scenemanager to be under renderer?
	- button background not working
	- change guide for start/switchto - INITALISATION ONLY NOT DRAWING, prevent scene mixing
	- TOTAL RENDERABLE (no funny lists like particlemanager)
	- percentage util
	- events for everything
	- remove ALL non-assetmanager apis
	- split api ref into individual chapters to make it more manageable
	- features in future.txt
    - // issue: won't update if you modify it again later

* server todo:
	- client connecting
	- net sending messages
	- figure out programmability (server scenes)
	- server.ini
	- a lot
