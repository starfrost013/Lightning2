<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ManagedLzma</name>
    </assembly>
    <members>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mLevel">
            <summary>
            0 &lt;= level &lt;= 9
            </summary>
        </member>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mDictSize">
            <summary>
            (1 &lt;&lt; 12) &lt;= dictSize &lt;= (1 &lt;&lt; 27) for 32-bit version <para/>
            (1 &lt;&lt; 12) &lt;= dictSize &lt;= (1 &lt;&lt; 30) for 64-bit version <para/>
            default = (1 &lt;&lt; 24)
            </summary>
        </member>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mReduceSize">
            <summary>
            Estimated size of data that will be compressed. default = 0xFFFFFFFF.
            Encoder uses this value to reduce dictionary size
            </summary>
        </member>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mLC">
            <summary>
            0 &lt;= lc &lt;= 8, default = 3
            </summary>
        </member>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mLP">
            <summary>
            0 &lt;= lp &lt;= 4, default = 0
            </summary>
        </member>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mPB">
            <summary>
            0 &lt;= pb &lt;= 4, default = 2
            </summary>
        </member>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mAlgo">
            <summary>
            0 - fast, 1 - normal, default = 1
            </summary>
        </member>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mFB">
            <summary>
            5 &lt;= fb &lt;= 273, default = 32
            </summary>
        </member>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mBtMode">
            <summary>
            0 - hashChain Mode, 1 - binTree mode - normal, default = 1
            </summary>
        </member>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mNumHashBytes">
            <summary>
            2, 3 or 4, default = 4
            </summary>
        </member>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mMC">
            <summary>
            1 &lt;= mc &lt;= (1 &lt;&lt; 30), default = 32
            </summary>
        </member>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mWriteEndMark">
            <summary>
            0 - do not write EOPM, 1 - write EOPM, default = 0
            </summary>
        </member>
        <member name="F:ManagedLzma.LZMA.Master.LZMA.CLzmaEncProps.mNumThreads">
            <summary>
            1 or 2, default = 2
            </summary>
        </member>
        <member name="T:ManagedLzma.LZMA.Decoder">
            <summary>
            This class maintains the state of a LZMA decoder and can be used to incrementally decode input data.
            This class is not threadsafe and must be accessed singlethreaded or under an external lock.
            </summary>
        </member>
        <member name="M:ManagedLzma.LZMA.Decoder.#ctor(ManagedLzma.LZMA.DecoderSettings)">
            <summary>
            Construct a decoder with the given settings. The amount of memory required depends on the settings.
            </summary>
            <param name="settings">The settings for the decoder must match the settings used when the data was encoded.</param>
        </member>
        <member name="M:ManagedLzma.LZMA.Decoder.Dispose">
            <summary>
            Release the memory used by the decoder. Depending on the allocator used
            it may require a garbage collector pass to actually collect it.
            </summary>
        </member>
        <member name="P:ManagedLzma.LZMA.Decoder.AvailableInputCapacity">
            <summary>
            The capacity of the input buffer. If this is zero you must read data from
            the output buffer before you can continue decoding more input data.
            </summary>
        </member>
        <member name="P:ManagedLzma.LZMA.Decoder.AvailableOutputLength">
            <summary>
            The number of currently available bytes in the output buffer.
            </summary>
        </member>
        <member name="P:ManagedLzma.LZMA.Decoder.IsOutputComplete">
            <summary>
            Returns true if the decoded output is complete.
            Note that some of the decoded output may still reside in the output buffer.
            </summary>
        </member>
        <member name="M:ManagedLzma.LZMA.Decoder.ReadOutputData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Allows you to read data from the output buffer.
            </summary>
            <param name="buffer">The target buffer into which data should be read.</param>
            <param name="offset">The offset at which data should be written.</param>
            <param name="length">The maximum number of bytes to read from the output buffer.</param>
            <returns>The number of bytes read from the output buffer.</returns>
        </member>
        <member name="M:ManagedLzma.LZMA.Decoder.Decode(System.Byte[],System.Int32,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Decode input data until either the input data has been used up, the given output limit
            has been reached, or the end of the decoded data has been reached.
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset at which the input data begins.</param>
            <param name="length">The length of the input data.</param>
            <param name="limit">
            A limit for the output data to decode. Already decoded but not yet read output data is counted against the limit.
            Can be used when the exact output length is known, or when the output buffer is limited and no readahead is wanted.
            </param>
            <param name="eof">Indicates that no more input data is available.</param>
            <returns>The number of bytes read from the input.</returns>
        </member>
        <member name="T:ManagedLzma.LZMA.AsyncDecoder">
            <summary>
            This class maintains the state of a LZMA decoder in a threadsafe way.
            The actual decoding happens on a separate thread.
            </summary>
        </member>
        <member name="M:ManagedLzma.LZMA.AsyncDecoder.CompleteInputAsync">
            <summary>
            Notifies the decoder that the input data is complete.
            The returned task notifies the caller when all output data has been read.
            </summary>
            <returns>A task which completes when all output data has been read.</returns>
        </member>
        <member name="M:ManagedLzma.LZMA.AsyncDecoder.WriteInputAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pass input data to the decoder. You must not modify the specified region of the buffer until the returned task completes.
            </summary>
            <param name="buffer">The buffer containing the input data.</param>
            <param name="offset">The offset at which the input data begins.</param>
            <param name="length">The length of the input data.</param>
            <returns>A task which tells you when the input data has been completely read and the buffer can be reused.</returns>
        </member>
        <member name="M:ManagedLzma.LZMA.AsyncDecoder.ReadOutputAsync(System.Byte[],System.Int32,System.Int32,ManagedLzma.StreamMode)">
            <summary>
            Read output data from the decoder. You should not use the specified region of the buffer until the returned task completes.
            </summary>
            <param name="buffer">The buffer into which output data should be written.</param>
            <param name="offset">The offset at which output data should be written.</param>
            <param name="length">The maximum number of bytes which should be written.</param>
            <param name="mode">
            Specifies whether to wait until the whole output buffer has been filled,
            or wether to return as soon as some data is available.
            </param>
            <returns>A task which, when completed, tells you how much data has been read.</returns>
        </member>
        <member name="T:ManagedLzma.LZMA2.Decoder">
            <summary>
            This class maintains the state of a LZMA decoder and can be used to incrementally decode input data.
            This class is not threadsafe and must be accessed singlethreaded or under an external lock.
            </summary>
        </member>
        <member name="M:ManagedLzma.LZMA2.Decoder.#ctor(ManagedLzma.LZMA2.DecoderSettings)">
            <summary>
            Construct a decoder with the given settings. The amount of memory required depends on the settings.
            </summary>
            <param name="settings">The settings for the decoder must match the settings used when the data was encoded.</param>
        </member>
        <member name="M:ManagedLzma.LZMA2.Decoder.Dispose">
            <summary>
            Release the memory used by the decoder. Depending on the allocator used
            it may require a garbage collector pass to actually collect it.
            </summary>
        </member>
        <member name="P:ManagedLzma.LZMA2.Decoder.AvailableInputCapacity">
            <summary>
            The capacity of the input buffer. If this is zero you must read data from
            the output buffer before you can continue decoding more input data.
            </summary>
        </member>
        <member name="P:ManagedLzma.LZMA2.Decoder.AvailableOutputLength">
            <summary>
            The number of currently available bytes in the output buffer.
            </summary>
        </member>
        <member name="P:ManagedLzma.LZMA2.Decoder.IsOutputComplete">
            <summary>
            Returns true if the decoded output is complete.
            Note that some of the decoded output may still reside in the output buffer.
            </summary>
        </member>
        <member name="M:ManagedLzma.LZMA2.Decoder.ReadOutputData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Allows you to read data from the output buffer.
            </summary>
            <param name="buffer">The target buffer into which data should be read.</param>
            <param name="offset">The offset at which data should be written.</param>
            <param name="length">The maximum number of bytes to read from the output buffer.</param>
            <returns>The number of bytes read from the output buffer.</returns>
        </member>
        <member name="M:ManagedLzma.LZMA2.Decoder.Decode(System.Byte[],System.Int32,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Decode input data until either the input data has been used up, the given output limit
            has been reached, or the end of the decoded data has been reached.
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset at which the input data begins.</param>
            <param name="length">The length of the input data.</param>
            <param name="limit">
            A limit for the output data to decode. Already decoded but not yet read output data is counted against the limit.
            Can be used when the exact output length is known, or when the output buffer is limited and no readahead is wanted.
            </param>
            <param name="eof">Indicates that no more input data is available.</param>
            <returns>The number of bytes read from the input.</returns>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributes.None">
            <summary>
            The file has no special attributes.
            </summary>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributes.Archive">
            <summary>
            The file is a candidate for backup or removal.
            </summary>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributes.ReadOnly">
            <summary>
            The file is read-only.
            </summary>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributes.Hidden">
            <summary>
            The file is hidden, and thus is not included in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributes.System">
            <summary>
            The file is a system file. That is, the file is part of the operating system or is used exclusively by the operating system.
            </summary>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributes.NotContentIndexed">
            <summary>
            The file will not be indexed by the operating system's content indexing service.
            </summary>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributesExtensions.PosixAttributeMask">
             <summary>
             Unofficial extension using the high bits to store posix file attributes in a 7z archive.
             </summary>
             <remarks>
             Some third party implementations store posix file attributes in the high 16 bits.
             Some implementations also set bit 15 to indicate that the high bits are used,
             but since only some do this the bit can't be trusted and must be ignored.
            
             Note that this is an unofficial extension making use of the fact that the official
             implementation was lazy in its error checking. In newer implementations the 7z UI
             acknowledges the extension and tries to parse it. The extension however has not
             become part of the 7z archive codebase, it is only handled in the UI layer.
             </remarks>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributesExtensions.InvalidAttributes">
            <summary>
            These flags do not exist and are invalid.
            </summary>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributesExtensions.ForbiddenAttributes">
            <summary>
            These attributes cause an exception when writing them and are auto-removed when reading them.
            </summary>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributesExtensions.StrippedAttributes">
            <summary>
            These attributes are auto-removed when reading or writing them.
            </summary>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributesExtensions.ToleratedAttributes">
            <summary>
            These attributes are not included in the enum but are allowed to be read or written.
            </summary>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributesExtensions.DirectoryAttribute">
            <summary>
            This attribute marks directories and is automatically managed.
            It is not exposed by the library except when implementing a custom metadata reader.
            </summary>
        </member>
        <member name="F:ManagedLzma.SevenZip.ArchivedAttributesExtensions.VisibleAttributes">
            <summary>
            Contains all publically visible attributes.
            </summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Reader.DecodedArchiveSectionStream.Length">
            <summary>Only provided for convenience, does not implement full CanSeek API contract.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Reader.DecodedArchiveSectionStream.Position">
            <summary>Only provided for convenience, does not implement full CanSeek API contract.</summary>
        </member>
        <member name="M:ManagedLzma.SevenZip.Reader.DecodedArchiveSectionStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Only provided for convenience, does not implement full CanSeek API contract.</summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.Reader.ArchiveMetadataReader">
            <summary>
            Allows subclasses to construct custom archive models from metadata.
            </summary>
            <remarks>
            Archives may contain a large number of files listed in their metadata stream.
            Reading all this file metadata into a class based in-memory model may carry significant
            memory overhead. Creating a subclass allows you to construct your own model of the archive
            metadata containing exactly the information you want and in exactly the format you want.
            It is also possible to entirely skip building an in-memory model of the file metadata.
            </remarks>
        </member>
        <member name="M:ManagedLzma.SevenZip.Reader.ArchiveMetadataReader.CheckFileHeader(System.IO.Stream)">
            <summary>Checks if the stream looks like a 7z archive.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Reader.ArchiveMetadataReader.EnablePosixFileAttributeExtension">
            <summary>
            There exists an unofficial extension which stores posix file attributes in
            metadata bits which are usually zero. Enabling this extension allows to read
            those non-standard archives.
            </summary>
            <remarks>
            This defaults to false because it is possible that someone creates a different
            but incompatible extension using the same bits. It should be safe for callers
            to always set it to true because currently it is the only known extension.
            </remarks>
        </member>
        <member name="T:ManagedLzma.SevenZip.Reader.ArchiveHeaderMetadataReader">
            <summary>
            Reads only the header of the archive metadata and discards file specific information.
            </summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.Reader.DecodedSectionReader">
            <summary>
            Provides an iterator-like API to unpack files from an archive section.
            </summary>
        </member>
        <member name="M:ManagedLzma.SevenZip.Reader.DecodedSectionReader.#ctor(System.IO.Stream,ManagedLzma.SevenZip.Metadata.ArchiveMetadata,System.Int32,ManagedLzma.PasswordStorage)">
            <summary>
            Creates a new iteration to unpack a sequence of streams from a decoded archive section.
            </summary>
            <param name="stream">A readable and seekable stream for the archive.</param>
            <param name="metadata">The metadata for the archive.</param>
            <param name="index">The decoder section index from the metadata which should be unpacked.</param>
            <param name="password">An optional password to unpack the archive content.</param>
        </member>
        <member name="P:ManagedLzma.SevenZip.Reader.DecodedSectionReader.StreamCount">
            <summary>
            Returns the number of streams in the section.
            </summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Reader.DecodedSectionReader.CurrentStreamIndex">
            <summary>
            Returns the index of the current stream in the section.
            </summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Reader.DecodedSectionReader.CurrentStreamPosition">
            <summary>
            Returns the position in the current stream.
            </summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Reader.DecodedSectionReader.CurrentStreamLength">
            <summary>
            Returns the length of the current stream.
            </summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Reader.DecodedSectionReader.CurrentStreamChecksum">
            <summary>
            Returns the checksum of the current stream, if available.
            </summary>
        </member>
        <member name="M:ManagedLzma.SevenZip.Reader.DecodedSectionReader.OpenStream">
            <summary>
            Opens the current stream. Can only be called once per stream.
            Disposing the returned stream is allowed but not required.
            </summary>
        </member>
        <member name="M:ManagedLzma.SevenZip.Reader.DecodedSectionReader.NextStream">
            <summary>
            Disposes the current stream and moves to the next stream.
            </summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Reader.DecodedStream.Length">
            <remarks>
            Returning the length from a non-seekable stream is non-standard.
            The caller must know otherwise that we support this method.
            </remarks>
        </member>
        <member name="P:ManagedLzma.SevenZip.Reader.DecodedStream.Position">
            <remarks>
            Returning the position from a non-seekable stream is non-standard.
            The caller must know otherwise that we support this method.
            </remarks>
        </member>
        <member name="M:ManagedLzma.SevenZip.Reader.DecodedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking on a non-seekable stream is non-standard.
            The caller must know otherwise that we support this method.
            </summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.FileModel.ArchiveFileModel.Metadata">
            <summary>The metadata of the archive.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.FileModel.ArchiveFileModel.RootFolder">
            <summary>The hierarchic structure of files and folders within the archive.</summary>
        </member>
        <member name="M:ManagedLzma.SevenZip.FileModel.ArchiveFileModel.GetFilesInSection(System.Int32)">
            <summary>
            Returns file metadata for the given decoder section.
            The returned list may contain null entries when the corresponding stream should not be written to a file.
            </summary>
            <param name="sectionIndex">The decoder section for which files should be returned.</param>
        </member>
        <member name="P:ManagedLzma.SevenZip.FileModel.ArchivedItem.FullName">
            <summary>
            The full name of the item, including the names of the parent folders within the archive.
            </summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.FileModel.ArchivedItem.Name">
            <summary>
            The name of the item.
            </summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.FileModel.ArchiveFileModelMetadataReader">
            <summary>
            Reads archive metadata and constructs a class hierarchy of the contained files.
            </summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.Metadata.ArchiveMetadata">
            <summary>Contains the metadata required to read content from an archive.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.ArchiveMetadata.FileSections">
            <summary>The raw streams stored in the archive.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.ArchiveMetadata.DecoderSections">
            <summary>Instructions on how to decode the archive.</summary>
        </member>
        <member name="M:ManagedLzma.SevenZip.Metadata.ArchiveMetadata.#ctor">
            <summary>Constructs empty metadata.</summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.Metadata.ArchiveFileSection">
            <summary>Describes where a raw stream is stored in an archive.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.ArchiveFileSection.Offset">
            <summary>The offset of the stream in the archive.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.ArchiveFileSection.Length">
            <summary>The length of the stream.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.ArchiveFileSection.Checksum">
            <summary>The checksum of the stream, if available.</summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.Metadata.ArchiveDecoderSection">
            <summary>Describes how to decode a section of an archive.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.ArchiveDecoderSection.Decoders">
            <summary>The decoders required to decode the section.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.ArchiveDecoderSection.DecodedStream">
            <summary>Describes where to obtain the decoded streams.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.ArchiveDecoderSection.Length">
            <summary>The total length of the decoded streams.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.ArchiveDecoderSection.Checksum">
            <summary>The checksum over all decoded streams, if available.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.ArchiveDecoderSection.Streams">
            <summary>Information about the streams contained in this section.</summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.Metadata.DecodedStreamMetadata">
            <summary>Information about a stream which can be decoded from an archive.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.DecodedStreamMetadata.Length">
            <summary>The length of the decoded stream.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.DecodedStreamMetadata.Checksum">
            <summary>The checksum of the decoded stream, if available.</summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.Metadata.DecoderMetadata">
            <summary>Describes how to configure a decoder and how to connect it to other decoders.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.DecoderMetadata.DecoderType">
            <summary>The type of the decoder.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.DecoderMetadata.Settings">
            <summary>Additional settings for the decoder. What exactly is stored here depends on the decoder type.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.DecoderMetadata.InputStreams">
            <summary>Describes where the decoder should obtain its inputs. The number of inputs depends on the decoder type.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.DecoderMetadata.OutputStreams">
            <summary>Describes the output of the decoder. The number of outputs depends on the decoder type.</summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.Metadata.DecoderInputMetadata">
            <summary>Describes where a decoder obtains its input.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.DecoderInputMetadata.DecoderIndex">
            <summary>
            The index of the decoder which provides the stream,
            or null if the stream is stored directly in the archive.
            </summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.DecoderInputMetadata.StreamIndex">
            <summary>
            The index of the stream. If the stream is provided by a decoder then this is an
            index into its output streams. If the stream is stored in the archive then this
            is an index into the file sections from the archive metadata.
            </summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.Metadata.DecoderOutputMetadata">
            <summary>Describes the output of a decoder.</summary>
        </member>
        <member name="P:ManagedLzma.SevenZip.Metadata.DecoderOutputMetadata.Length">
            <summary>The length of the output stream provided by the decoder.</summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.Metadata.CompressionMethod">
            <summary>
            Describes a compression method as defined in the 7z file format.
            </summary>
            <remarks>
            These methods are defined by the 7z file format and not by the application.
            You cannot add new compression methods here, nobody will understand them.
            </remarks>
        </member>
        <member name="M:ManagedLzma.SevenZip.Writer.ArchiveWriter.WriteMetadata(ManagedLzma.SevenZip.Writer.ArchiveMetadataProvider)">
            <summary>
            Appends a new metadata section to the end of the file.
            </summary>
        </member>
        <member name="M:ManagedLzma.SevenZip.Writer.ArchiveWriter.WriteHeader">
            <summary>
            Updates the file header to refer to the last written metadata section.
            </summary>
        </member>
        <member name="M:ManagedLzma.SevenZip.Writer.ArchiveWriter.TransferSectionAsync(System.IO.Stream,ManagedLzma.SevenZip.Metadata.ArchiveMetadata,System.Int32)">
            <summary>
            Allows to copy complete sections from existing archives into this archive.
            </summary>
        </member>
        <member name="M:ManagedLzma.SevenZip.Writer.ArchiveWriter.TranscodeSectionAsync(System.IO.Stream,ManagedLzma.SevenZip.Metadata.ArchiveMetadata,System.Int32,System.Func{System.Int32,System.Threading.Tasks.Task{System.Boolean}},ManagedLzma.SevenZip.Writer.EncoderDefinition)">
            <summary>
            Allows to copy partial sections from an existing archive, reencoding selected entries on the fly.
            </summary>
        </member>
        <member name="M:ManagedLzma.SevenZip.Writer.AesEncoderSettings.#ctor(ManagedLzma.PasswordStorage)">
            <summary>
            Creates encoder settings with a random seed.
            </summary>
            <remarks>
            This overload does not dispose the encoder seed. This is no security flaw because the
            seed is public anyways. If you still want to ensure there are no traces in memory when
            you are done, use the other overload which gives you control over disposing the seed.
            </remarks>
        </member>
        <member name="T:ManagedLzma.SevenZip.Writer.EncoderInput">
            <summary>
            Transfers external input into an encoder.
            </summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.Writer.EncoderStorage">
            <summary>
            Transfers encoder output into external storage.
            </summary>
        </member>
        <member name="T:ManagedLzma.SevenZip.Writer.EncoderConnection">
            <summary>
            Transfers data from the output of one encoder to the input of another encoder.
            </summary>
        </member>
        <member name="T:ManagedLzma.Checksum">
            <summary>CRC checksum used by 7z archives.</summary>
        </member>
        <member name="T:ManagedLzma.ConstrainedReadStream">
            <remarks>
            This class is internal, the caller can be trusted to pass valid paramaters, so we only check them in debug mode.
            </remarks>
        </member>
        <member name="T:ManagedLzma.PasswordStorage">
            <summary>
            Stores a password in a way so that memory dumps do not expose the password in plaintext.
            Note that the password is still recoverable with some work if you have a full memory dump.
            The intention is to protect against accidental exposal of the password, not protecting it from attackers.
            </summary>
            <remarks>
            Note that we store a char array and not a string so we can control its lifetime by zeroing the array contents when we are done.
            The intention is to avoid accidently leaving passwords in memory dumps just because the GC didn't yet get around to clean them up.
            To avoid issues with the array being modified after completing the task we immediately make a copy and clear the original array.
            </remarks>
        </member>
        <member name="M:ManagedLzma.PasswordStorage.Create(System.String)">
            <summary>
            WARNING: This is just a convenience method. If you care about memory dumps not containing readable copies
            of your password you shouldn't put it in an immutable string object. Use the overload taking an array.
            </summary>
        </member>
        <member name="M:ManagedLzma.PasswordStorage.Create(System.Char[])">
            <summary>
            Returns a container storing a copy of the given password. The array passed as argument is cleared.
            </summary>
        </member>
        <member name="M:ManagedLzma.PasswordAccessor.ToString">
            <remarks>
            Intentionally not returning the password as string here because that risks leaking it in a memory dump.
            </remarks>
        </member>
        <member name="M:ManagedLzma.PasswordAccessor.GetHashCode">
            <remarks>Hash function taken from Roslyn.</remarks>
        </member>
        <member name="T:ManagedLzma.InternalFailureException">
            <summary>
            This exception is only thrown from "impossible" situations.
            If it is ever observed this indicates a bug in the library.
            </summary>
        </member>
        <member name="T:ManagedLzma.StreamMode">
            <summary>
            Controls how the completion of <see cref="T:ManagedLzma.IStreamReader"/> and <see cref="T:ManagedLzma.IStreamWriter"/> methods work.
            </summary>
        </member>
        <member name="F:ManagedLzma.StreamMode.Complete">
            <summary>
            Wait until the provided buffer section has been completely processed.
            </summary>
        </member>
        <member name="F:ManagedLzma.StreamMode.Partial">
            <summary>
            Return after processing any amount of data from the provided buffer section.
            </summary>
        </member>
        <member name="T:ManagedLzma.IStreamReader">
            <remarks>
            This API is not designed for cancellation because in the context it is used
            there is no sane way to resume work once a sub-task has been canceled.
            Note that the caller can still abort the whole operation (instead of a single call)
            by disposing the proper controlling object.
            </remarks>
        </member>
        <member name="M:ManagedLzma.IStreamReader.ReadAsync(System.Byte[],System.Int32,System.Int32,ManagedLzma.StreamMode)">
            <summary>Requests to read data into the provided buffer.</summary>
            <param name="buffer">The buffer into which data is read. Cannot be null.</param>
            <param name="offset">The offset at which data is written.</param>
            <param name="length">The amount of data to read. Must be greater than zero.</param>
            <param name="mode">Determines the response if the buffer cannot be filled.</param>
            <returns>A task which completes when the read completes. Returns the number of bytes written.</returns>
        </member>
        <member name="T:ManagedLzma.IStreamWriter">
            <remarks>
            This API is not designed for cancellation because in the context it is used
            there is no sane way to resume work once a sub-task has been canceled.
            Note that the caller can still abort the whole operation (instead of a single call)
            by disposing the proper controlling object.
            </remarks>
        </member>
        <member name="M:ManagedLzma.IStreamWriter.CompleteAsync">
            <returns>
            A task which completes once all outstanding writes have been completed
            and any remaining data has been forwarded to the underlying receiver.
            In other words, once the returned task completes it is safe to dispose.
            </returns>
        </member>
    </members>
</doc>
